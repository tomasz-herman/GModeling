package pl.edu.pw.mini.mg1.layout;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import pl.edu.pw.mini.mg1.cameras.PerspectiveCamera;

import javax.swing.*;
import java.awt.*;

public class CameraLayout implements Controller<PerspectiveCamera> {
    private JPanel mainPane;
    private JSpinner near;
    private JSpinner far;
    private JSpinner fov;
    private JSpinner focus;
    private JSpinner eyeDist;
    private PerspectiveCamera camera;

    public CameraLayout() {
        $$$setupUI$$$();

        near.setModel(new SpinnerNumberModel(5, 0.01, 10, 0.01));
        far.setModel(new SpinnerNumberModel(1000, 10, 10000, 10));
        fov.setModel(new SpinnerNumberModel(60, 1, 179, 1));
        eyeDist.setModel(new SpinnerNumberModel(5, -10, 10, 0.01));
        focus.setModel(new SpinnerNumberModel(5, 0.01, 1000, 0.1));

        near.addChangeListener(e -> {
            if (camera != null) {
                camera.setNear(((Number) near.getValue()).floatValue());
            }
        });
        far.addChangeListener(e -> {
            if (camera != null) {
                camera.setFar(((Number) far.getValue()).floatValue());
            }
        });
        fov.addChangeListener(e -> {
            if (camera != null) {
                camera.setFov(((Number) fov.getValue()).floatValue());
            }
        });
        eyeDist.addChangeListener(e -> {
            if (camera != null) {
                camera.setEyeSeparation(((Number) eyeDist.getValue()).floatValue());
            }
        });
        focus.addChangeListener(e -> {
            if (camera != null) {
                camera.setFocalLength(((Number) focus.getValue()).floatValue());
            }
        });
    }

    @Override
    public void set(PerspectiveCamera camera) {
        this.camera = camera;
        refresh();
    }

    public Container getMainPane() {
        return mainPane;
    }

    @Override
    public void refresh() {
        if (camera != null) {
            near.setValue(camera.getNear());
            far.setValue(camera.getFar());
            fov.setValue(camera.getFov());
            focus.setValue(camera.getFocalLength());
            eyeDist.setValue(camera.getEyeSeparation());
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new javax.swing.JPanel();
        mainPane.setLayout(new GridLayoutManager(6, 2, new java.awt.Insets(5, 5, 5, 5), -1, -1));
        final javax.swing.JLabel label1 = new javax.swing.JLabel();
        mainPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPane.add(spacer1, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final javax.swing.JLabel label2 = new javax.swing.JLabel();
        mainPane.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final javax.swing.JLabel label3 = new javax.swing.JLabel();
        mainPane.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        near = new javax.swing.JSpinner();
        mainPane.add(near, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        far = new javax.swing.JSpinner();
        mainPane.add(far, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fov = new javax.swing.JSpinner();
        mainPane.add(fov, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final javax.swing.JLabel label4 = new javax.swing.JLabel();
        mainPane.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        focus = new javax.swing.JSpinner();
        mainPane.add(focus, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        eyeDist = new javax.swing.JSpinner();
        mainPane.add(eyeDist, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final javax.swing.JLabel label5 = new javax.swing.JLabel();
        mainPane.add(label5, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public javax.swing.JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

}
