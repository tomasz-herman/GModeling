package pl.edu.pw.mini.mg1.layout;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.joml.Vector3fc;
import pl.edu.pw.mini.mg1.models.BezierCurveC2;
import pl.edu.pw.mini.mg1.models.Model;
import pl.edu.pw.mini.mg1.models.Point;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;

public class BezierC2Layout implements Controller<BezierCurveC2> {
    private JCheckBox showBSplinePolylineCheckBox;
    private JCheckBox showBezierPolylineCheckBox;
    private JList<String> bsplinePointsList;
    private JList<String> bezierPointsList;
    private JPanel mainPane;
    private JSpinner yPosition;
    private JSpinner zPosition;
    private JSpinner xPosition;
    private JCheckBox showBezierPointsCheckBox;
    private BezierCurveC2 bezierCurveC2;
    private int idx = -1;

    public BezierC2Layout() {
        $$$setupUI$$$();
        showBSplinePolylineCheckBox.addActionListener(e -> {
            if (bezierCurveC2 == null) return;
            bezierCurveC2.setShowPolyline(showBSplinePolylineCheckBox.isSelected());
        });
        showBezierPolylineCheckBox.addActionListener(e -> {
            if (bezierCurveC2 == null) return;
            bezierCurveC2.setShowBezierPolyline(showBezierPolylineCheckBox.isSelected());
        });
        showBezierPointsCheckBox.addActionListener(e -> {
            if (bezierCurveC2 == null) return;
            bezierCurveC2.setShowBezierPoints(showBezierPointsCheckBox.isSelected());
        });
        bezierPointsList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                if (bezierCurveC2 == null) return;
                var indices = bezierPointsList.getSelectionModel().getSelectedIndices();
                if (indices.length == 0) return;
                idx = indices[0];
                bezierCurveC2.setSelectedVirtualPoint(idx);
                Point p = bezierCurveC2.getVirtualPoints().toList().get(idx);
                xPosition.setValue(p.getPosition().x());
                yPosition.setValue(p.getPosition().y());
                zPosition.setValue(p.getPosition().z());
            }
        });
        xPosition.setModel(new SpinnerNumberModel(0, -1000, 1000, 0.01));
        yPosition.setModel(new SpinnerNumberModel(0, -1000, 1000, 0.01));
        zPosition.setModel(new SpinnerNumberModel(0, -1000, 1000, 0.01));
        xPosition.addChangeListener(e -> {
            if (idx != -1) {
                if (bezierCurveC2 == null) return;
                Vector3fc position = bezierCurveC2.getVirtualPoints().toList().get(idx).getPosition();
                bezierCurveC2.getVirtualPoints().toList().get(idx).setPosition(((Number) xPosition.getValue()).floatValue(), position.y(), position.z());
            }
        });
        yPosition.addChangeListener(e -> {
            if (idx != -1) {
                if (bezierCurveC2 == null) return;
                Vector3fc position = bezierCurveC2.getVirtualPoints().toList().get(idx).getPosition();
                bezierCurveC2.getVirtualPoints().toList().get(idx).setPosition(position.x(), ((Number) yPosition.getValue()).floatValue(), position.z());
            }
        });
        zPosition.addChangeListener(e -> {
            if (idx != -1) {
                if (bezierCurveC2 == null) return;
                Vector3fc position = bezierCurveC2.getVirtualPoints().toList().get(idx).getPosition();
                bezierCurveC2.getVirtualPoints().toList().get(idx).setPosition(position.x(), position.y(), ((Number) zPosition.getValue()).floatValue());
            }
        });
    }

    @Override
    public void set(BezierCurveC2 bezierCurveC2) {
        this.bezierCurveC2 = bezierCurveC2;
        refresh();
    }

    @Override
    public Container getMainPane() {
        return mainPane;
    }

    @Override
    public void refresh() {
        if (bezierCurveC2 == null) {
            showBSplinePolylineCheckBox.setSelected(false);
            showBezierPolylineCheckBox.setSelected(false);
            showBezierPointsCheckBox.setSelected(false);
            bsplinePointsList.setListData(new String[]{});
            bezierPointsList.setListData(new String[]{});
        } else {
            showBSplinePolylineCheckBox.setSelected(bezierCurveC2.isShowPolyline());
            showBezierPolylineCheckBox.setSelected(bezierCurveC2.isShowBezierPolyline());
            showBezierPointsCheckBox.setSelected(bezierCurveC2.isShowBezierPoints());
            bsplinePointsList.setListData(bezierCurveC2.getPoints().map(Model::getName).toArray(String[]::new));
            bezierPointsList.setListData(bezierCurveC2.getVirtualPoints().map(Model::getName).toArray(String[]::new));
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new GridLayoutManager(9, 1, new Insets(0, 0, 0, 0), -1, -1));
        showBSplinePolylineCheckBox = new JCheckBox();
        showBSplinePolylineCheckBox.setText("show b-spline polyline");
        mainPane.add(showBSplinePolylineCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPane.add(spacer1, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        showBezierPolylineCheckBox = new JCheckBox();
        showBezierPolylineCheckBox.setText("show bezier polyline");
        mainPane.add(showBezierPolylineCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("BSpline points:");
        mainPane.add(label1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bsplinePointsList = new JList();
        mainPane.add(bsplinePointsList, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Bezier points:");
        mainPane.add(label2, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bezierPointsList = new JList();
        mainPane.add(bezierPointsList, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPane.add(panel1, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, "Bezier point position", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label3 = new JLabel();
        label3.setText("x");
        panel1.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("y");
        panel1.add(label4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("z");
        panel1.add(label5, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        yPosition = new JSpinner();
        panel1.add(yPosition, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        zPosition = new JSpinner();
        panel1.add(zPosition, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        xPosition = new JSpinner();
        panel1.add(xPosition, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showBezierPointsCheckBox = new JCheckBox();
        showBezierPointsCheckBox.setText("show bezier points");
        mainPane.add(showBezierPointsCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

}
