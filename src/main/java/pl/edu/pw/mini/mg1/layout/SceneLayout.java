package pl.edu.pw.mini.mg1.layout;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import pl.edu.pw.mini.mg1.models.Point;
import pl.edu.pw.mini.mg1.models.Scene;
import pl.edu.pw.mini.mg1.models.Torus;

import javax.swing.*;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.util.Objects;

public class SceneLayout implements Controller<Scene> {
    private JTable table;
    private JPanel mainPane;
    private JButton deleteButton;
    private JComboBox<String> addCombo;
    private Scene scene;

    public SceneLayout() {
        $$$setupUI$$$();
        TableModel model = new SceneTableModel();
        table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        table.setModel(model);
        table.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                var indices = table.getSelectionModel().getSelectedIndices();
                scene.selectModels(indices);
            }
        });
        addCombo.setRenderer(new PromptComboBoxRenderer("Add"));
        addCombo.setSelectedIndex(-1);
        addCombo.addActionListener(e -> {
            switch ((String) Objects.requireNonNull(addCombo.getSelectedItem())) {
                case "Point" -> scene.addModel(new Point());
                case "Torus" -> scene.addModel(new Torus());
            }
            addCombo.setSelectedIndex(-1);
            table.revalidate();
        });
        deleteButton.addActionListener(e -> {
            scene.deleteSelected();
            table.revalidate();
        });
    }

    @Override
    public void set(Scene scene) {
        this.scene = scene;
    }

    @Override
    public Container getMainPane() {
        return mainPane;
    }

    @Override
    public void refresh() {
        ListSelectionModel selection = table.getSelectionModel();
        int[] selected = scene.getSelected();
        selection.clearSelection();
        for (int i : selected) {
            selection.addSelectionInterval(i, i);
        }
    }

    private final class SceneTableModel extends AbstractTableModel {
        @Override
        public int getRowCount() {
            if (scene == null) return 0;
            else return scene.getModels().size();
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return "Models";
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return scene.getModels().get(rowIndex).getName();
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            scene.getModels().get(rowIndex).setName(aValue.toString());
        }
    }

    private static class PromptComboBoxRenderer extends BasicComboBoxRenderer {
        private final String prompt;

        public PromptComboBoxRenderer(String prompt) {
            this.prompt = prompt;
        }

        public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (value == null) setText(prompt);
            return this;
        }
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPane.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 200), null, 0, false));
        table = new JTable();
        scrollPane1.setViewportView(table);
        final Spacer spacer1 = new Spacer();
        mainPane.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("Delete");
        panel1.add(deleteButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        addCombo = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Point");
        defaultComboBoxModel1.addElement("Torus");
        addCombo.setModel(defaultComboBoxModel1);
        panel1.add(addCombo, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

}
