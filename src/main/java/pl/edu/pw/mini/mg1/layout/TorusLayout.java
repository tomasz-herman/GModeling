package pl.edu.pw.mini.mg1.layout;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import pl.edu.pw.mini.mg1.models.Torus;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class TorusLayout implements Controller<Torus> {
    private JPanel mainPane;
    private JSpinner innerRadius;
    private JSpinner outerRadius;
    private JSpinner innerSegments;
    private JSpinner outerSegments;
    private Torus torus;

    public TorusLayout() {
        $$$setupUI$$$();
        innerRadius.setModel(new SpinnerNumberModel(5, 0.01, 1000, 0.01));
        outerRadius.setModel(new SpinnerNumberModel(1, 0.01, 1000, 0.01));
        innerSegments.setModel(new SpinnerNumberModel(3, 3, 1000, 1));
        outerSegments.setModel(new SpinnerNumberModel(3, 3, 1000, 1));

        innerRadius.addChangeListener(e -> {
            if (torus != null) {
                torus.setInnerRadius(((Number) innerRadius.getValue()).floatValue());
            }
        });
        outerRadius.addChangeListener(e -> {
            if (torus != null) {
                torus.setOuterRadius(((Number) outerRadius.getValue()).floatValue());
            }
        });
        innerSegments.addChangeListener(e -> {
            if (torus != null) {
                torus.setInnerSegments(((Number) innerSegments.getValue()).intValue());
            }
        });
        outerSegments.addChangeListener(e -> {
            if (torus != null) {
                torus.setOuterSegments(((Number) outerSegments.getValue()).intValue());
            }
        });
    }

    @Override
    public void set(Torus torus) {
        this.torus = torus;
        refresh();
    }

    @Override
    public Container getMainPane() {
        return mainPane;
    }

    @Override
    public void refresh() {
        if (torus != null) {
            innerRadius.setValue(torus.getInnerRadius());
            outerRadius.setValue(torus.getOuterRadius());
            innerSegments.setValue(torus.getInnerSegments());
            outerSegments.setValue(torus.getOuterSegments());
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new javax.swing.JPanel();
        mainPane.setLayout(new GridLayoutManager(5, 2, new java.awt.Insets(0, 5, 0, 5), -1, -1));
        mainPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Torus specific", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, null));
        final javax.swing.JLabel label1 = new javax.swing.JLabel();
        mainPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        innerRadius = new javax.swing.JSpinner();
        mainPane.add(innerRadius, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final javax.swing.JLabel label2 = new javax.swing.JLabel();
        mainPane.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final javax.swing.JLabel label3 = new javax.swing.JLabel();
        mainPane.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final javax.swing.JLabel label4 = new javax.swing.JLabel();
        mainPane.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        outerRadius = new javax.swing.JSpinner();
        mainPane.add(outerRadius, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        innerSegments = new javax.swing.JSpinner();
        mainPane.add(innerSegments, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        outerSegments = new javax.swing.JSpinner();
        mainPane.add(outerSegments, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPane.add(spacer1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public javax.swing.JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

}
